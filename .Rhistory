AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
table(AnnAll_tcga$`THR clusters`)
# fix the pam50 subtypes
Pheno_tcga$Pam50_subtypes <- as.factor(Pheno_tcga$Subtype)
Pheno_tcga$Pam50_subtypes <- gsub('BRCA_', '', Pheno_tcga$Pam50_subtypes)
table(Pheno_tcga$Pam50_subtypes)
## Keep only the relevant information (Metastasis Event and Time)
survival_tcga <- Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Disease.Free.Status", "Disease.Free..Months.",
"Pam50_subtypes", "ER.Status.By.IHC",
"PR.status.by.ihc", "HER2.fish.status", "IHC.HER2", "THR clusters")]
table(survival_tcga$`THR clusters`)
survival_tcga$`THR clusters` <- as.factor(survival_tcga$`THR clusters`)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
# DFS
Fit_tcga_DFS <- survfit(Surv(Disease.Free..Months., Disease.Free.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
############################################################################
############################################################################
# plot OS
cluster_colors <- as.vector(ann_colors$`THR clusters`)
ggsurvplot(Fit_tcga_os,
risk.table = FALSE,
pval = TRUE,
palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_tcga$`THR clusters`),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR50 clusters and OS in TCGA')
table(AnnAll_tcga$`THR clusters`)
# fix the cluster names in the pheno table
table(Pheno_tcga$`THR clusters`)
#Pheno_tcga$`THR clusters` <- as.factor(Pheno_tcga$`THR clusters`)
levels(Pheno_tcga$`THR clusters`) <- c('E3', 'E1', 'E4', 'E2', 'T1')
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
table(AnnAll_tcga$`THR clusters`)
# fix the pam50 subtypes
Pheno_tcga$Pam50_subtypes <- as.factor(Pheno_tcga$Subtype)
Pheno_tcga$Pam50_subtypes <- gsub('BRCA_', '', Pheno_tcga$Pam50_subtypes)
table(Pheno_tcga$Pam50_subtypes)
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
#Pheno_tcga$`THR clusters` <- as.factor(Pheno_tcga$`THR clusters`)
levels(Pheno_tcga$`THR clusters`) <- c('E3', 'E1', 'E4', 'E2', 'T1')
table(AnnAll_tcga$`THR clusters`)
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
pheatmap(Expr_tcga_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color = ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_tcga,
annotation_names_col = T,
#annotation_row = AnnAll_metabric,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 8,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
library(glmnet)
#################
THR_signature <- readxl::read_xlsx("./data/THR Signatures_sep23.xlsx")
# get the THR50 signature
THR_50 <- THR_signature$`THR-50.1`[!is.na(THR_signature$`THR-50.1`)]
THR_50 <- gsub('-', '', THR_50)
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
##################
#range(Expr_tcga)
#Expr_tcga <- log2(Expr_tcga + 6)
###################
# fix gene names
rownames(Expr_tcga)[grep('^ZNF652', rownames(Expr_tcga))]
# filter the THR signatures to include only the genes present in the expr matrices
THR_50_fil <- THR_50[THR_50 %in% rownames(Expr_tcga)]
#######################################
## read TCGA PAM50
Pam50_tcga <- read.delim('data/brca_tcga/data_clinical_patient.txt')
Pam50_tcga <- Pam50_tcga[-c(1:4), ]
Pam50_tcga$Patient.ID <- gsub("\\-", "\\.", Pam50_tcga$X.Patient.Identifier)
Pam50_tcga <- Pam50_tcga[, c('Patient.ID', 'Subtype')]
# merge with TCGA pheno table
summary(Pheno_tcga$Patient.ID %in% Pam50_tcga$Patient.ID)
Pheno_tcga <- merge(Pheno_tcga, Pam50_tcga, by = "Patient.ID")
rownames(Pheno_tcga) <- Pheno_tcga$Patient.ID
table(Pheno_tcga$Subtype)
table(Pam50_tcga$Subtype)
#############################################################################################
#############################################################################################
## heatmap (THR 50)
Expr_tcga_heatmap <- Expr_tcga[THR_50_fil, ]
# Create annotation for columns/samples based on some clinical variables:
Pheno_tcga_forHeatmap <- Pheno_tcga
rownames(Pheno_tcga_forHeatmap) <- NULL
AnnAll_tcga <- Pheno_tcga_forHeatmap %>%
as.data.frame() %>%
dplyr::select(Patient.ID, ER.Status.By.IHC, PR.status.by.ihc, HER2.fish.status, IHC.HER2, Subtype) %>%
filter(Subtype %in% c('BRCA_Basal', 'BRCA_Her2', 'BRCA_LumA', 'BRCA_LumB')) %>%
filter(ER.Status.By.IHC %in% c('Negative', 'Positive')) %>%
filter(PR.status.by.ihc %in% c('Negative', 'Positive')) %>%
dplyr:: mutate(Subtype = gsub('BRCA_', '', Subtype),
Pam50_subtypes = as.factor(Subtype),
IHC.HER2 = as.factor(IHC.HER2),
HER2.fish.status = as.factor(HER2.fish.status),
ER.Status.By.IHC = as.factor(ER.Status.By.IHC),
PR.status.by.ihc = as.factor(PR.status.by.ihc)
) %>%
column_to_rownames(var = "Patient.ID")
table(AnnAll_tcga$Pam50_subtypes)
table(AnnAll_tcga$ER.Status.By.IHC)
table(AnnAll_tcga$PR.status.by.ihc)
# filter and transpose the expression matrix
Expr_tcga_heatmap <- Expr_tcga_heatmap[, rownames(AnnAll_tcga)]
Expr_tcga_heatmap_t <- t(Expr_tcga_heatmap)
# filter pheno (above we remove normal and NC)
Pheno_tcga <- Pheno_tcga[rownames(AnnAll_tcga), ]
# colors
ann_colors = list()
ann_colors$Pam50_subtypes <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
names(ann_colors$Pam50_subtypes) <- levels(AnnAll_tcga$Pam50_subtypes)
ann_colors$ER.Status.By.IHC <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$ER.Status.By.IHC) <- levels(AnnAll_tcga$ER.Status.By.IHC)
#ann_colors$X3.Gene.classifier.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
#names(ann_colors$X3.Gene.classifier.subtype) <- levels(AnnAll_tcga$X3.Gene.classifier.subtype)
#ann_colors$Neoplasm.Histologic.Grade <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(3)
#names(ann_colors$Neoplasm.Histologic.Grade) <- levels(AnnAll_tcga$Neoplasm.Histologic.Grade)
breaksList = seq(-4, 4, by = 1)
ColPal <- colorRampPalette(colors = rev(brewer.pal(11,"RdYlBu")))(20)
ColPal2 <- rev(colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(20))
#######################################################
# get the 5 groups
heat_tcga <- pheatmap(Expr_tcga_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color =ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_tcga,
annotation_names_col = T,
#annotation_row = AnnAll_tcga,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 10,
silent = TRUE,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
clusters_tcga <- as.data.frame(cbind(t(Expr_tcga_heatmap),
'THR clusters' = cutree(heat_tcga$tree_col,
k = 5)))
table(clusters_tcga$`THR clusters`)
# add the cluster info to the phenotype table
all(rownames(clusters_tcga) == rownames(Pheno_tcga))
Pheno_tcga$`THR clusters` <- clusters_tcga$`THR clusters`
# add the cluster info to the Ann dataframe and re-plot the heatmap
all(rownames(clusters_tcga) == rownames(AnnAll_tcga))
AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(AnnAll_tcga$`THR clusters`)
# re-order the annotation dataframe then the expression matrix by cluster
#AnnAll_tcga <- AnnAll_tcga[order(AnnAll_tcga$cluster, decreasing = FALSE), ]
#Expr_tcga_heatmap <- Expr_tcga_heatmap[, rownames(AnnAll_tcga)]
ann_colors$`THR clusters` <- colorRampPalette(colors = rev(brewer.pal(5,"Dark2")))(5)
names(ann_colors$`THR clusters`) <- levels(AnnAll_tcga$`THR clusters`)
# heatmap with cluster annotation
pheatmap(Expr_tcga_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color = ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_tcga,
annotation_names_col = T,
#annotation_row = AnnAll_metabric,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 8,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
# another one with T and E annotation
levels(AnnAll_tcga$`THR clusters`) <- c('E3', 'E1', 'E4', 'E2', 'T1')
ann_colors$`THR clusters` <- c('#66a61e', "#E7298A", '#D95F02', "#1B9E77", '#7570b3')
names(ann_colors$`THR clusters`) <- levels(AnnAll_tcga$`THR clusters`)
pheatmap(Expr_tcga_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color =ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_tcga,
annotation_names_col = T,
#annotation_row = AnnAll_metabric,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 8,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
# fix the cluster names in the pheno table
table(Pheno_tcga$`THR clusters`)
#Pheno_tcga$`THR clusters` <- as.factor(Pheno_tcga$`THR clusters`)
levels(Pheno_tcga$`THR clusters`) <- c('E3', 'E1', 'E4', 'E2', 'T1')
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
table(AnnAll_tcga$`THR clusters`)
# fix the pam50 subtypes
Pheno_tcga$Pam50_subtypes <- as.factor(Pheno_tcga$Subtype)
Pheno_tcga$Pam50_subtypes <- gsub('BRCA_', '', Pheno_tcga$Pam50_subtypes)
table(Pheno_tcga$Pam50_subtypes)
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
Pheno_tcga$`THR clusters`
Pheno_tcga$`THR clusters` <- as.factor(Pheno_tcga$`THR clusters`)
levels(Pheno_tcga$`THR clusters`) <- c('E3', 'E1', 'E4', 'E2', 'T1')
#AnnAll_tcga$`THR clusters` <- as.factor(paste0('c', clusters_tcga$`THR clusters`))
table(Pheno_tcga$`THR clusters`)
# fix the pam50 subtypes
Pheno_tcga$Pam50_subtypes <- as.factor(Pheno_tcga$Subtype)
Pheno_tcga$Pam50_subtypes <- gsub('BRCA_', '', Pheno_tcga$Pam50_subtypes)
table(Pheno_tcga$Pam50_subtypes)
## Keep only the relevant information (Metastasis Event and Time)
survival_tcga <- Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Disease.Free.Status", "Disease.Free..Months.",
"Pam50_subtypes", "ER.Status.By.IHC",
"PR.status.by.ihc", "HER2.fish.status", "IHC.HER2", "THR clusters")]
table(survival_tcga$`THR clusters`)
survival_tcga$`THR clusters` <- as.factor(survival_tcga$`THR clusters`)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ `THR clusters`, data = survival_tcga)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ THR clusters, data = survival_tcga)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ "THR clusters", data = survival_tcga)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
# DFS
Fit_tcga_DFS <- survfit(Surv(Disease.Free..Months., Disease.Free.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
Fit_tcga_os
# DFS
Fit_tcga_DFS <- survfit(Surv(Disease.Free..Months., Disease.Free.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
Fit_tcga_DFS
############################################################################
############################################################################
# plot OS
cluster_colors <- as.vector(ann_colors$`THR clusters`)
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
library(glmnet)
#################
THR_signature <- readxl::read_xlsx("./data/THR Signatures_sep23.xlsx")
# get the THR50 signature
THR_50 <- THR_signature$`THR-50.1`[!is.na(THR_signature$`THR-50.1`)]
THR_50 <- gsub('-', '', THR_50)
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
# fix gene names
rownames(Expr_metabric)[grep('^ZNF652', rownames(Expr_metabric))]
# filter the THR signatures to include only the genes present in the expr matrices
THR_50_fil <- THR_50[THR_50 %in% rownames(Expr_metabric)]
#############################################################################################
#############################################################################################
## heatmap (THR 50)
Expr_metabric_heatmap <- Expr_metabric[THR_50_fil, ]
# Create annotation for columns/samples based on some clinical variables:
Pheno_metabric_forHeatmap <- Pheno_metabric
rownames(Pheno_metabric_forHeatmap) <- NULL
AnnAll_metabric <- Pheno_metabric_forHeatmap %>%
as.data.frame() %>%
dplyr::select(Sample.ID, Pam50...Claudin.low.subtype, X3.Gene.classifier.subtype, HER2.Status, PR.Status, ER.status.measured.by.IHC, Neoplasm.Histologic.Grade) %>%
column_to_rownames(var = "Sample.ID") %>%
filter(Pam50...Claudin.low.subtype %in% c('Basal', 'claudin-low', 'Her2', 'LumA', 'LumB')) %>%
dplyr::mutate(X3.Gene.classifier.subtype = as.factor(X3.Gene.classifier.subtype),
ER.status.measured.by.IHC = as.factor(ER.status.measured.by.IHC),
Pam50...Claudin.low.subtype = as.factor(Pam50...Claudin.low.subtype),
HER2.Status = as.factor(HER2.Status),
PR.Status = as.factor(PR.Status),
#Overall.Survival.Status = as.factor(Overall.Survival.Status),
#Relapse.Free.Status = as.factor(Relapse.Free.Status),
#Tumor.Stage = as.factor(Tumor.Stage),
Neoplasm.Histologic.Grade = as.factor(Neoplasm.Histologic.Grade))
# filter and transpose the expression matrix
Expr_metabric_heatmap <- Expr_metabric_heatmap[, rownames(AnnAll_metabric)]
Expr_metabric_heatmap_t <- t(Expr_metabric_heatmap)
# filter pheno (above we remove normal and NC)
Pheno_metabric <- Pheno_metabric[rownames(AnnAll_metabric), ]
# colors
ann_colors = list()
ann_colors$Pam50...Claudin.low.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(5)
names(ann_colors$Pam50...Claudin.low.subtype) <- levels(AnnAll_metabric$Pam50...Claudin.low.subtype)
ann_colors$ER.status.measured.by.IHC <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$ER.status.measured.by.IHC) <- levels(AnnAll_metabric$ER.status.measured.by.IHC)
ann_colors$X3.Gene.classifier.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
names(ann_colors$X3.Gene.classifier.subtype) <- levels(AnnAll_metabric$X3.Gene.classifier.subtype)
ann_colors$Neoplasm.Histologic.Grade <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(3)
names(ann_colors$Neoplasm.Histologic.Grade) <- levels(AnnAll_metabric$Neoplasm.Histologic.Grade)
breaksList = seq(-4, 4, by = 1)
ColPal <- colorRampPalette(colors = rev(brewer.pal(11,"RdYlBu")))(20)
ColPal2 <- rev(colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(20))
#######################################################
# get the 5 groups
heat_metabric <- pheatmap(Expr_metabric_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color =ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_metabric,
annotation_names_col = T,
#annotation_row = AnnAll_metabric,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 10,
silent = TRUE,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
clusters_metabric <- as.data.frame(cbind(t(Expr_metabric_heatmap),
'THR clusters' = cutree(heat_metabric$tree_col,
k = 5)))
table(clusters_metabric$`THR clusters`)
# add the cluster info to the phenotype table
all(rownames(clusters_metabric) == rownames(Pheno_metabric))
Pheno_metabric$`THR clusters` <- clusters_metabric$`THR clusters`
# add the cluster info to the Ann dataframe and re-plot the heatmap
all(rownames(clusters_metabric) == rownames(AnnAll_metabric))
AnnAll_metabric$`THR clusters` <- as.factor(paste0('c', clusters_metabric$`THR clusters`))
table(AnnAll_metabric$`THR clusters`)
# re-order the annotation dataframe then the expression matrix by cluster
#AnnAll_metabric <- AnnAll_metabric[order(AnnAll_metabric$cluster, decreasing = FALSE), ]
#Expr_metabric_heatmap <- Expr_metabric_heatmap[, rownames(AnnAll_metabric)]
ann_colors$`THR clusters` <- colorRampPalette(colors = rev(brewer.pal(5,"Dark2")))(5)
levels(AnnAll_metabric$`THR clusters`) <- c('E3', 'E1', 'T1', 'E4', 'E2')
names(ann_colors$`THR clusters`) <- levels(AnnAll_metabric$`THR clusters`)
#############################################################################################################
# get cluster 3 with crossing curves
cluster3_pheno <- Pheno_metabric[Pheno_metabric$`THR clusters` == '3', ]
cluster3_expr <- Expr_metabric[, rownames(cluster3_pheno)]
all(rownames(cluster3_pheno) == colnames(cluster3_expr))
######################################
## divide based on survival (RFS)
summary(cluster3_pheno$Relapse.Free.Status..Months.)
summary(cluster3_pheno$Relapse.Free.Status..Months. >= 50)
cluster3_pheno$c3_rfs_binary <- ifelse(cluster3_pheno$Relapse.Free.Status..Months. >= 50, 'longSurv', 'shortSurv')
table(cluster3_pheno$c3_rfs_binary)
######################################
# differential expression
design <- model.matrix( ~ cluster3_pheno$c3_rfs_binary)
colnames(design)[2] <- "longVSshortSurvival"
fit <- lmFit(cluster3_expr, design)
fitted.ebayes <- eBayes(fit)
c3_top20 <- topTable(fitted.ebayes, number = 20)
c3_top20$gene <- rownames(c3_top20)
c3_top200 <- topTable(fitted.ebayes, number = 200)
c3_top200$gene <- rownames(c3_top200)
c3_gns <- rownames(topTable(fitted.ebayes, number = 20))
# genes in common with THR50
summary(c3_gns %in% THR_50)
### combine in 1 dataset: Training
RFS_c3 <- as.factor(cluster3_pheno$c3_rfs_binary)
Data_c3 <- as.data.frame(cbind(t(cluster3_expr), RFS_c3))
Data_c3$RFS_c3 <- as.factor(Data_c3$RFS_c3)
levels(Data_c3$RFS_c3) <- c('longSurv', 'shortSurv')
table(Data_c3$RFS_c3)
table(Pheno_metabric$Pam50...Claudin.low.subtype)
72/1082
220/1800
table(Pheno_tcga$HER2.fish.status)
table(Pheno_tcga$IHC.HER2)
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
library(glmnet)
#################
THR_signature <- readxl::read_xlsx("./data/THR Signatures_sep23.xlsx")
# get the THR50 signature
THR_50 <- THR_signature$`THR-50.1`[!is.na(THR_signature$`THR-50.1`)]
THR_50 <- gsub('-', '', THR_50)
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
##################
#range(Expr_tcga)
#Expr_tcga <- log2(Expr_tcga + 6)
###################
# fix gene names
rownames(Expr_tcga)[grep('^ZNF652', rownames(Expr_tcga))]
# filter the THR signatures to include only the genes present in the expr matrices
THR_50_fil <- THR_50[THR_50 %in% rownames(Expr_tcga)]
#######################################
## read TCGA PAM50
Pam50_tcga <- read.delim('data/brca_tcga/data_clinical_patient.txt')
Pam50_tcga <- Pam50_tcga[-c(1:4), ]
Pam50_tcga$Patient.ID <- gsub("\\-", "\\.", Pam50_tcga$X.Patient.Identifier)
Pam50_tcga <- Pam50_tcga[, c('Patient.ID', 'Subtype')]
# merge with TCGA pheno table
summary(Pheno_tcga$Patient.ID %in% Pam50_tcga$Patient.ID)
Pheno_tcga <- merge(Pheno_tcga, Pam50_tcga, by = "Patient.ID")
rownames(Pheno_tcga) <- Pheno_tcga$Patient.ID
table(Pheno_tcga$Subtype)
table(Pam50_tcga$Subtype)
gc()
