library(survival)
library(tidyverse)
library(pheatmap)
library(glmnet)
library(readxl)
#################
# load the THR signatures
THR_signature <- readxl::read_xlsx("./data/THR Signatures_sep23.xlsx")
# get the THR50 signature
THR_50 <- THR_signature$`THR-50.1`[!is.na(THR_signature$`THR-50.1`)]
THR_50 <- gsub('-', '', THR_50)
################
# load the ET signatures
################
ET_signatures <- read_xlsx('objs/ET-9 Selection Steps.xlsx')
ET60 <- ET_signatures$`ET-60`[!is.na(ET_signatures$`ET-60`)]
ET9 <- ET_signatures$`ET-9`[!is.na(ET_signatures$`ET-9`)]
################
# fix gene names
################
ET60[ET60=='ADGRG1'] <- 'GPR56'
ET60[ET60=='DENND6B'] <- 'FAM116B'
ET60[ET60=='TENT5B'] <- 'FAM46B'
ET60[ET60=='HSA011916'] <- 'CTDNEP1'
ET9[ET9=='ADGRG1'] <- 'GPR56'
ET9[ET9=='DENND6B'] <- 'FAM116B'
ET9[ET9=='TENT5B'] <- 'FAM46B'
ET9[ET9=='HSA011916'] <- 'CTDNEP1'
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
# fix gene names
rownames(Expr_metabric_refAll)[grep('^ZNF652', rownames(Expr_metabric_refAll))]
# filter the THR signatures to include only the genes present in the expr matrices
THR_50_fil <- THR_50[THR_50 %in% rownames(Expr_metabric_refAll)]
THR_56 <- c(THR_50_fil, 'CDC20', 'LMNB2', 'KIF2C', 'FAM64A', 'KIF4A', 'TPX2')
# same for ET60 and ET9
ET60_fil <- ET60[ET60 %in% rownames(Expr_metabric_refAll)]
ET9_fil <- ET9[ET9 %in% rownames(Expr_metabric_refAll)]
#############################################################################################
#############################################################################################
## heatmap (THR 50)
Expr_metabric_refAll_heatmap <- Expr_metabric_refAll[THR_56, ]
# Create annotation for columns/samples based on some clinical variables:
Pheno_metabric_forHeatmap <- Pheno_metabric
rownames(Pheno_metabric_forHeatmap) <- NULL
AnnAll_metabric <- Pheno_metabric_forHeatmap %>%
as.data.frame() %>%
dplyr::select(Sample.ID, Pam50...Claudin.low.subtype, X3.Gene.classifier.subtype, HER2.Status, PR.Status, ER.status.measured.by.IHC, Neoplasm.Histologic.Grade) %>%
column_to_rownames(var = "Sample.ID") %>%
filter(Pam50...Claudin.low.subtype %in% c('Basal', 'claudin-low', 'Her2', 'LumA', 'LumB')) %>%
dplyr::mutate(X3.Gene.classifier.subtype = as.factor(X3.Gene.classifier.subtype),
ER.status.measured.by.IHC = as.factor(ER.status.measured.by.IHC),
Pam50...Claudin.low.subtype = as.factor(Pam50...Claudin.low.subtype),
HER2.Status = as.factor(HER2.Status),
PR.Status = as.factor(PR.Status),
#Overall.Survival.Status = as.factor(Overall.Survival.Status),
#Relapse.Free.Status = as.factor(Relapse.Free.Status),
#Tumor.Stage = as.factor(Tumor.Stage),
Neoplasm.Histologic.Grade = as.factor(Neoplasm.Histologic.Grade))
# filter and transpose the expression matrix
Expr_metabric_refAll_heatmap <- Expr_metabric_refAll_heatmap[, rownames(AnnAll_metabric)]
Expr_metabric_refAll_heatmap_t <- t(Expr_metabric_refAll_heatmap)
# filter pheno (above we remove normal and NC)
# save all pheno_metabric for future use
#Pheno_metabric2 <- Pheno_metabric
Pheno_metabric <- Pheno_metabric[rownames(AnnAll_metabric), ]
# colors
ann_colors = list()
ann_colors$Pam50...Claudin.low.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(5)
names(ann_colors$Pam50...Claudin.low.subtype) <- levels(AnnAll_metabric$Pam50...Claudin.low.subtype)
ann_colors$ER.status.measured.by.IHC <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$ER.status.measured.by.IHC) <- levels(AnnAll_metabric$ER.status.measured.by.IHC)
ann_colors$X3.Gene.classifier.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
names(ann_colors$X3.Gene.classifier.subtype) <- levels(AnnAll_metabric$X3.Gene.classifier.subtype)
ann_colors$Neoplasm.Histologic.Grade <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(3)
names(ann_colors$Neoplasm.Histologic.Grade) <- levels(AnnAll_metabric$Neoplasm.Histologic.Grade)
breaksList = seq(-4, 4, by = 1)
ColPal <- colorRampPalette(colors = rev(brewer.pal(11,"RdYlBu")))(20)
ColPal2 <- rev(colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(20))
#######################################################
# get the 5 groups
heat_metabric <- pheatmap(Expr_metabric_refAll_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color =ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_metabric,
annotation_names_col = T,
#annotation_row = AnnAll_metabric,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 10,
silent = TRUE,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
clusters_metabric <- as.data.frame(cbind(t(Expr_metabric_refAll_heatmap),
'THR clusters' = cutree(heat_metabric$tree_col,
k = 5)))
table(clusters_metabric$`THR clusters`)
# add the cluster info to the phenotype table
all(rownames(clusters_metabric) == rownames(Pheno_metabric))
Pheno_metabric$`THR clusters` <- clusters_metabric$`THR clusters`
#Pheno_metabric2$`THR clusters` <- clusters_metabric$`THR clusters`
# add the cluster info to the Ann dataframe and re-plot the heatmap
all(rownames(clusters_metabric) == rownames(AnnAll_metabric))
AnnAll_metabric$`THR clusters` <- as.factor(paste0('c', clusters_metabric$`THR clusters`))
table(AnnAll_metabric$`THR clusters`)
# re-order the annotation dataframe then the expression matrix by cluster
#AnnAll_metabric <- AnnAll_metabric[order(AnnAll_metabric$cluster, decreasing = FALSE), ]
#Expr_metabric_refAll_heatmap <- Expr_metabric_refAll_heatmap[, rownames(AnnAll_metabric)]
ann_colors$`THR clusters` <- c('#66A61E', "#7570B3", "#1B9E77" , '#D95F02', "#E7298A")
levels(AnnAll_metabric$`THR clusters`) <- c('E1', 'T1', 'E3', 'E4', 'E2')
names(ann_colors$`THR clusters`) <- levels(AnnAll_metabric$`THR clusters`)
# CDC20 is duplicated, remove one
Expr_metabric_refAll_heatmap2 <- Expr_metabric_refAll_heatmap[!duplicated(rownames(Expr_metabric_refAll_heatmap)), ]
# merge E2 and E4
# Updating the 'THR clusters' column
clusters_metabric$`THR clusters` <- as.character(clusters_metabric$`THR clusters`)
clusters_metabric$`THR clusters`[clusters_metabric$`THR clusters` == "E4"] <- "E2"
AnnAll_metabric$`THR clusters` <- as.character(AnnAll_metabric$`THR clusters`)
AnnAll_metabric$`THR clusters`[AnnAll_metabric$`THR clusters` == "E4"] <- "E2"
# Updating the color scheme
ann_colors$`THR clusters` <- c('#66A61E', "#7570B3", "#1B9E77" , '#E7298A')
names(ann_colors$`THR clusters`) <- c('E1', 'T1', 'E3', 'E2')
# fix the cluster names in the pheno table
table(Pheno_metabric$`THR clusters`)
Pheno_metabric$`THR clusters` <- as.factor(Pheno_metabric$`THR clusters`)
#Pheno_metabric2$`THR clusters` <- as.factor(Pheno_metabric2$`THR clusters`)
levels(Pheno_metabric$`THR clusters`) <- c('E1', 'T1', 'E3', 'E2', 'E2')
#levels(Pheno_metabric2$`THR clusters`) <- c('E1', 'T1', 'E3', 'E2', 'E2')
table(Pheno_metabric$`THR clusters`)
#############################################################################################################
# get cluster 3 with crossing curves
T1_pheno <- Pheno_metabric[Pheno_metabric$`THR clusters` == 'T1', ]
T1_expr <- Expr_metabric_refAll[, rownames(T1_pheno)]
all(rownames(T1_pheno) == colnames(T1_expr))
######################################
## divide based on survival (RFS)
summary(T1_pheno$Relapse.Free.Status..Months.)
summary(T1_pheno$Relapse.Free.Status..Months. >= 50)
T1_pheno$T1_rfs_binary <- ifelse(T1_pheno$Relapse.Free.Status..Months. >= 50, 'longSurv', 'shortSurv')
table(T1_pheno$T1_rfs_binary)
#################################################################################################
## training
#################################################################################################
### combine in 1 dataset: Training
RFS_T1 <- as.factor(T1_pheno$T1_rfs_binary)
Data_T1 <- as.data.frame(cbind(t(T1_expr), RFS_T1))
Data_T1$RFS_T1 <- as.factor(Data_T1$RFS_T1)
levels(Data_T1$RFS_T1) <- c('longSurv', 'shortSurv')
table(Data_T1$RFS_T1)
################################################################
# separate T1 using THR50 derived I20 genes
################################################################
# load the THR50-derived i20 genes
THR50_i20 <- readxl::read_xlsx("./figures/c3_DE_THR50_RFS/THR50_c3_longVSshortSurv_DE.xlsx")$gene
THR50_i200 <- readxl::read_xlsx("./figures/c3_DE_THR50_RFS/THR50_c3_longVSshortSurv_DE_top200.xlsx")$gene
# fix HLA-DOB
THR50_i200[THR50_i200 == 'HLA-DOB'] <- 'HLA_DOB'
colnames(Data_T1)[colnames(Data_T1) == 'HLA-DOB'] <- 'HLA_DOB'
################################################################
# THR50 i20 model
################################################################
i200model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model)
#save(i20model, file = './objs/THR50i20model_onTHR56clusters.rda')
###
library(glmtoolbox)
stepCriterion(i200model, direction="backward", criterion="p-value", test="score")
feat_back <- c('KIR3DL3', 'HIST1H2BF', 'KLRD1', 'ENC1', 'SPINT1', 'ZNF501', 'NCBP2',
'UBE2NL', 'CDH6', 'BX095841', 'AK095067', 'DOLK', 'GZMA', 'MAP7D2', 'BX111540',
'P4HA1', 'AI215459', 'DNM3', 'BF513364', 'BQ015566', 'TRPM5', 'FOXN2', 'TMEM176A',
'EOMES', 'PPP1R16B', 'PITPNM2', 'CD27', 'EHD3', 'WDFY1', 'AA830182'
)
feat_back <- c('KIR3DL3', 'HIST1H2BF', 'KLRD1', 'ENC1', 'SPINT1', 'ZNF501', 'NCBP2',
'UBE2NL', 'CDH6', 'BX095841', 'AK095067', 'DOLK', 'GZMA', 'MAP7D2', 'BX111540',
'P4HA1', 'AI215459', 'DNM3', 'BF513364', 'BQ015566', 'TRPM5', 'FOXN2', 'TMEM176A',
'EOMES', 'PPP1R16B', 'PITPNM2', 'CD27', 'EHD3', 'WDFY1', 'AA830182'
)
i200model_back <- glm(as.formula((paste("RFS_T1 ~", paste(feat_back, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model_back)
# prob
THR56_T1_prob_i20model <- i200model_back %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
table(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = c('E1', 'E2', 'E3', 'T1b', 'T1a'))
levels(survival_metabric$THR.clusters_i20model_Merged) <- c('E1', 'E2', 'E3', 'Pi+', 'Pi-')
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 2))
feat_forward <- c('ENC1', 'NCBP2', 'DOLK', 'TRPM5', 'UBE2NL', 'CDH6', 'CAPN14', 'KIR3DL3', 'UTP20', 'MAP7D2', 'FOXN2', 'WDFY1', 'MBOAT7', 'SMAD7', 'ZNF501', 'AA830182', 'LPPR2', 'KLRD1', 'BX111540', 'VAMP4')
i20model_mod <- glm(as.formula((paste("RFS_T1 ~", paste(feat_forward, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i20model_mod)
i200model_forward <- glm(as.formula((paste("RFS_T1 ~", paste(feat_forward, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model_forward)
# prob
THR56_T1_prob_i20model <- i200model_forward %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
table(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = c('E1', 'E2', 'E3', 'T1b', 'T1a'))
levels(survival_metabric$THR.clusters_i20model_Merged) <- c('E1', 'E2', 'E3', 'Pi+', 'Pi-')
##
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 2))
dev.off()
# prob
THR56_T1_prob_i20model <- i200model_back %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
table(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = c('E1', 'E2', 'E3', 'T1b', 'T1a'))
levels(survival_metabric$THR.clusters_i20model_Merged) <- c('E1', 'E2', 'E3', 'Pi+', 'Pi-')
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel2.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 2))
dev.off()
################################################################
# THR50 i20 model
################################################################
i200model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model)
# prob
THR56_T1_prob_i20model <- i200model %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
table(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = c('E1', 'E2', 'E3', 'T1b', 'T1a'))
levels(survival_metabric$THR.clusters_i20model_Merged) <- c('E1', 'E2', 'E3', 'Pi+', 'Pi-')
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i200All.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 2))
dev.off()
