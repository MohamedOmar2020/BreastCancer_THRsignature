##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = TRUE,
#palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR56 clusters and RFS: THR56 + THR50-derived i20')
################################################################
# THR50 i20 model
################################################################
i20model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200[1:100], collapse = "+")))), data = Data_T1, family = "binomial")
summary(i20model)
############################################################################
##  Make predictions
# prob
THR56_T1_prob_i20model <- i20model %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = TRUE,
#palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR56 clusters and RFS: THR56 + THR50-derived i20')
i20model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200[1:150], collapse = "+")))), data = Data_T1, family = "binomial")
summary(i20model)
# prob
THR56_T1_prob_i20model <- i20model %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = TRUE,
#palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR56 clusters and RFS: THR56 + THR50-derived i20')
# fix HLA-DOB
THR50_i200[THR50_i200 == 'HLA-DOB'] <- 'HLA_DOB'
colnames(Data_T1)[colnames(Data_T1) == 'HLA-DOB'] <- 'HLA_DOB'
i20model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i20model)
############################################################################
##  Make predictions
# prob
THR56_T1_prob_i20model <- i20model %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
###########################################################################################
##########################################################################################
## survival analysis
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = TRUE,
#palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR56 clusters and RFS: THR56 + THR50-derived i20')
i200model
################################################################
# THR50 i20 model
################################################################
i200model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model)
################################################################
# THR50 i20 model
################################################################
i200model <- glm(as.formula((paste("RFS_T1 ~", paste(THR50_i200, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model)
###
stepCriterion(i200model, direction="forward", criterion="p-value", test="lr")
install.packages('glmtoolbox')
install.packages('RcppGSL')
###
library(glmtoolbox)
renv::install('RcppGSL')
install.packages("RcppGSL", type = "source")
install.packages("RcppGSL", type = "source")
renv::install("RcppGSL")
renv::install('glmtoolbox')
###
library(glmtoolbox)
stepCriterion(i200model, direction="forward", criterion="p-value", test="lr")
summary(i200model)
View(i200model)
sel <- c('ENC1', 'NCBP2', 'DOLK', 'TRPM5', 'UBE2NL', 'CDH6', 'CAPN14', 'KIR3DL3', 'UTP20', 'MAP7D2', 'FOXN2', 'WDFY1', 'MBOAT7', 'SMAD7', 'ZNF501', 'AA830182', 'LPPR2', 'KLRD1', 'BX111540', 'VAMP4')
i200model_mod <- glm(as.formula((paste("RFS_T1 ~", paste(sel, collapse = "+")))), data = Data_T1, family = "binomial")
summary(i200model_mod)
# prob
THR56_T1_prob_i20model <- i200model_mod %>% predict(Data_T1 , type = "response")
# Threshold
thr_THR56_T1_i20model <- coords(roc(RFS_T1, THR56_T1_prob_i20model, levels = c('longSurv', 'shortSurv'), direction = "<"), "best")["threshold"]
### ROC Curve
ROC_THR56_T1_i20model <- roc(RFS_T1, THR56_T1_prob_i20model, plot = F, print.auc=TRUE, print.auc.col="black", ci = T, levels = c('longSurv', 'shortSurv'), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_THR56_T1_i20model
### Get predictions based on best threshold from ROC curve
predClasses_THR56_T1_i20model <- ifelse(THR56_T1_prob_i20model >= thr_THR56_T1_i20model$threshold, "longSurv", "shortSurv")
table(predClasses_THR56_T1_i20model)
predClasses_THR56_T1_i20model <- factor(predClasses_THR56_T1_i20model, levels = c('longSurv', 'shortSurv'))
############################################
T1_pheno2 <- cbind(T1_pheno[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Relapse.Free.Status", "Relapse.Free.Status..Months.", "Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC", "X3.Gene.classifier.subtype")],
THR56_T1_prob_i20model, predClasses_THR56_T1_i20model
)
##########################################################################################
## recombine T1 with the rest
T1_pheno2$THR_clusters_i20model <- as.factor(T1_pheno2$predClasses_THR56_T1_i20model)
levels(T1_pheno2$THR_clusters_i20model) <- c('T1a', 'T1b')
T1 <- data.frame(THR_clusters_i20model = T1_pheno2$THR_clusters_i20model,
`Sample.ID` = rownames(T1_pheno))
rownames(T1) <- rownames(T1_pheno)
# merge
Pheno_metabric$`THR clusters`[Pheno_metabric$`THR clusters` == 'T1'] <- NA
Pheno_metabric2 <- merge(x = T1, y = Pheno_metabric, by="Sample.ID", all.y = TRUE)
Pheno_metabric2 <- Pheno_metabric2 %>%
mutate(`THR clusters` = as.factor(`THR clusters`), THR_clusters_i20model = as.factor(THR_clusters_i20model)) %>%
mutate(THR.clusters_i20model_Merged = coalesce(THR_clusters_i20model,`THR clusters`))
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric2[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype",
"THR.clusters_i20model_Merged"
)]
survival_metabric$THR.clusters_i20model_Merged <- as.factor(survival_metabric$THR.clusters_i20model_Merged)
survival_metabric$THR.clusters_i20model_Merged <- droplevels(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = TRUE,
#palette = cluster_colors,
#xlim = c(0,120),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme_survminer(base_size = 18, font.x = c(18, 'bold.italic', 'black'), font.y = c(18, 'bold.italic', 'black'), font.tickslab = c(18, 'plain', 'black'), font.legend = c(18, 'bold', 'black')),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'THR56 clusters and RFS: THR56 + THR50-derived i20')
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.pdf", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
)
dev.off()
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
)
dev.off()
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= 'THR clusters',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
)+ guides(
colour = guide_legend(ncol = 3))
dev.off()
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 3))
dev.off()
survival_metabric$THR.clusters_i20model_Merged
table(survival_metabric$THR.clusters_i20model_Merged )
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = 'E1', 'E2', 'E3', 'T1b', 'T1a')
survival_metabric$THR.clusters_i20model_Merged <- factor(survival_metabric$THR.clusters_i20model_Merged, levels = c('E1', 'E2', 'E3', 'T1b', 'T1a'))
table(survival_metabric$THR.clusters_i20model_Merged)
levels(survival_metabric$THR.clusters_i20model_Merged) <- c('E1', 'E2', 'E3', 'Pi+', 'Pi-')
table(survival_metabric$THR.clusters_i20model_Merged)
################################################################
## Survival curves: THR50 i20
################################################################
# RFS
Fit_metabric_RFS_i20model <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ THR.clusters_i20model_Merged, data = survival_metabric)
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 3))
dev.off()
##############
## plot RFS
tiff("./figures/logreg/THR56_clusters/metabric_rfs_i20featSel.tiff", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_metabric_RFS_i20model,
risk.table = FALSE,
pval = FALSE,
#palette = cluster_colors,
xlim = c(0,240),
legend.labs = levels(survival_metabric$THR.clusters_i20model_Merged),
legend.title	= '',
pval.size = 12,
#break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR56 clusters and RFS: THR56 + THR50-derived i20'
) + guides(
colour = guide_legend(ncol = 2))
dev.off()
stepCriterion(fit2, direction="backward", criterion="p-value", test="score")
stepCriterion(i200model, direction="backward", criterion="p-value", test="score")
