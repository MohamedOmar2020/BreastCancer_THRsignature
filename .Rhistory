legend.labs = levels(survival_metabric$merged_THR_clusters_i20_logReg),
legend.title	= '',
pval.size = 10,
break.x.by = 40,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR70 clusters and RFS'
) + guides(
colour = guide_legend(ncol = 3))
dev.off()
# Cox
cox_Fit_metabric_rfs_THR70_with_i20_logReg <- coxph(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ merged_THR_clusters_i20_logReg, data = cox_metabric)
summary(cox_Fit_metabric_rfs_THR70_with_i20_logReg)
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
#######################################
## read TCGA PAM50
Pam50_tcga <- read.delim('data/brca_tcga/data_clinical_patient.txt')
Pam50_tcga <- Pam50_tcga[-c(1:4), ]
Pam50_tcga$Patient.ID <- gsub("\\-", "\\.", Pam50_tcga$X.Patient.Identifier)
Pam50_tcga <- Pam50_tcga[, c('Patient.ID', 'Subtype', 'Overall.Survival.Status', 'Overall.Survival..Months.', 'Disease.Free.Status', 'Disease.Free..Months.', 'Progression.Free.Status', 'Progress.Free.Survival..Months.')]
# merge with TCGA pheno table
summary(Pheno_tcga$Patient.ID %in% Pam50_tcga$Patient.ID)
# remove the old survival info
Pheno_tcga <- Pheno_tcga[, !colnames(Pheno_tcga) %in% c('Overall.Survival..Months.', 'Overall.Survival.Status', 'Disease.Free.Status', 'Disease.Free..Months.')]
# merge
Pheno_tcga <- merge(Pheno_tcga, Pam50_tcga, by = "Patient.ID")
rownames(Pheno_tcga) <- Pheno_tcga$Patient.ID
table(Pheno_tcga$Subtype)
table(Pam50_tcga$Subtype)
##########################
# remove weird cancer types
##########################
table(Pheno_metabric$Cancer.Type.Detailed)
table(Pheno_tcga$Cancer.Type.Detailed)
Pheno_tcga <- Pheno_tcga[!(Pheno_tcga$Cancer.Type.Detailed %in% c('Adenoid Cystic Breast Cancer', 'Basal Cell Carcinoma',
'Malignant Phyllodes Tumor of the Breast',
'Metaplastic Breast Cancer', 'Paget Disease of the Nipple',
'Solid Papillary Carcinoma of the Breast')),
]
## Keep only the relevant information (Metastasis Event and Time)
survival_metabric <- Pheno_metabric[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Relapse.Free.Status", "Relapse.Free.Status..Months.",
"Pam50...Claudin.low.subtype", "ER.status.measured.by.IHC",
"X3.Gene.classifier.subtype", "PAM50 clusters")]
Expr_tcga_refAll <- Expr_tcga_refAll[rownames(Pheno_tcga), ]
rownames(Pheno_tcga)
Expr_tcga_refAll <- Expr_tcga_refAll[, rownames(Pheno_tcga)]
#############################################################################################################
##############################################################################################################
survival_tcga <- Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Disease.Free.Status", "Disease.Free..Months.",
"Subtype", "ER.Status.By.IHC",
"PR.status.by.ihc", "HER2.fish.status", "IHC.HER2", "THR clusters")]
#############################################################################################################
##############################################################################################################
survival_tcga <- Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Disease.Free.Status", "Disease.Free..Months.",
"Subtype", "ER.Status.By.IHC",
"PR.status.by.ihc", "HER2.fish.status", "IHC.HER2")]
survival_tcga$`THR clusters` <- as.factor(survival_tcga$`THR clusters`)
#############
# fix the survival information
survival_tcga$Disease.Free.Status <- gsub("\\:.+", "", survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- gsub("\\:.+", "", survival_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free.Status <- as.numeric(survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- as.numeric(survival_tcga$Overall.Survival.Status)
table(survival_tcga$Disease.Free.Status)
table(survival_tcga$Overall.Survival.Status)
table(Pheno_tcga$Disease.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free..Months. <- as.numeric(survival_tcga$Disease.Free..Months.)
survival_tcga$Overall.Survival..Months. <- as.numeric(survival_tcga$Overall.Survival..Months.)
table(survival_tcga$Subtype)
survival_tcga <-  survival_tcga %>% dplyr:: mutate(Subtype = gsub('BRCA_', '', Subtype),
Pam50_subtypes = as.factor(Subtype)) %>%
dplyr::select(-Subtype) %>%
table(survival_tcga$Subtype)
survival_tcga <-  survival_tcga %>% dplyr:: mutate(Subtype = gsub('BRCA_', '', Subtype),
Pam50_subtypes = as.factor(Subtype)) %>%
dplyr::select(-Subtype)
table(survival_tcga$Pam50_subtypes)
survival_tcga
#############
# fix the survival information
survival_tcga$Disease.Free.Status <- gsub("\\:.+", "", survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- gsub("\\:.+", "", survival_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free.Status <- as.numeric(survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- as.numeric(survival_tcga$Overall.Survival.Status)
table(survival_tcga$Disease.Free.Status)
table(survival_tcga$Overall.Survival.Status)
table(Pheno_tcga$Disease.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free..Months. <- as.numeric(survival_tcga$Disease.Free..Months.)
survival_tcga$Overall.Survival..Months. <- as.numeric(survival_tcga$Overall.Survival..Months.)
# os with original PAM50
Fit_tcga_os_PAM50original <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ Pam50_subtypes, data = survival_tcga)
# dFS with original PAM50
Fit_tcga_dfs_PAM50original <- survfit(Surv(Relapse.Free.Status..Months., Relapse.Free.Status) ~ Pam50_subtypes, data = survival_tcga)
# dFS with original PAM50
Fit_tcga_dfs_PAM50original <- survfit(Surv(Disease.Free.Status, Disease.Free..Months.) ~ Pam50_subtypes, data = survival_tcga)
# dFS with original PAM50
Fit_tcga_dfs_PAM50original <- survfit(Surv(Disease.Free..Months., Disease.Free.Status) ~ Pam50_subtypes, data = survival_tcga)
Fit_tcga_os_PAM50original
Fit_tcga_dfs_PAM50original
png("./figures/PAM50/tcga/tcga_os_PAM50.png", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_tcga_os_PAM50original,
risk.table = FALSE,
pval = TRUE,
xlim = c(0,120),
legend.labs = levels(survival_tcga$Pam50_subtypes),
legend.title	= '',
pval.size = 10,
break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR70 clusters and RFS'
) + guides(
colour = guide_legend(ncol = 3))
dev.off()
Fit_tcga_os_PAM50original
## RFS
png("./figures/PAM50/tcga/tcga_dfs_PAM50.png", width = 2000, height = 2000, res = 350)
ggsurvplot(Fit_tcga_dfs_PAM50original,
risk.table = FALSE,
pval = TRUE,
xlim = c(0,120),
legend.labs = levels(survival_tcga$Pam50_subtypes),
legend.title	= '',
pval.size = 10,
break.x.by = 20,
ggtheme = theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey90"),
panel.border = element_blank(),
panel.background = element_blank(),
legend.spacing.x = unit(0.5, "cm"),
legend.spacing.y = unit(0.5, "cm"),
legend.key.height = unit(1.3, "lines"),
axis.title = element_text(size = 14, face = 'bold.italic', color = 'black'),
axis.text = element_text(size = 12, face = 'bold.italic', color = 'black'),
legend.text = element_text(size = 16, face = 'bold.italic', color = 'black'),
),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE,
#title = 'THR70 clusters and RFS'
) + guides(
colour = guide_legend(ncol = 3))
dev.off()
# Clean the working directory
rm(list = ls())
# Load necessary packages
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(dplyr)
library(precrec)
library(patchwork)
library(survminer)
library(survival)
library(tidyverse)
library(pheatmap)
library(glmnet)
library(RTCGA)
library(readxl)
#################
# THR signature --------------
#################
THR_signature <- readxl::read_xlsx("./data/THR_Signatures_Jan25_2023.xlsx")
# get the THR70 signature
THR_70 <- THR_signature$`THR-70`[!is.na(THR_signature$`THR-70`)]
THR_70 <- gsub('-', '', THR_70)
#############################################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
##############################################
###############
# Fix in metabric
# setdiff(THR70, rownames(Expr_metabric_refAll))
# grep('^FAM63A', rownames(Expr_metabric_refAll), value = TRUE) # MINDY1
# grep('^FAM176A', rownames(Expr_metabric_refAll), value = TRUE) # EVA1A
# grep('^LEPREL1', rownames(Expr_metabric_refAll), value = TRUE) # P3H2
# grep('^RSNL2', rownames(Expr_metabric_refAll), value = TRUE) # SDHAF3
#
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'FAM63A'] <- 'MINDY1'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'FAM176A'] <- 'EVA1A'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'LEPREL1'] <- 'P3H2'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'ACN9'] <- 'SDHAF3'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'GPR56'] <- 'ADGRG1'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'CTDNEP1'] <- 'HSA011916'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'FAM116B'] <- 'DENND6B'
# rownames(Expr_metabric_refAll)[rownames(Expr_metabric_refAll) == 'FAM46B'] <- 'TENT5B'
##############
# filter the signatures to include only the genes present in the expr matrices
THR70_fil <- THR_70[THR_70 %in% rownames(Expr_tcga_refAll) & THR_70 %in% rownames(Expr_metabric_refAll)]
setdiff(THR_70, THR70_fil)
#######################################
## read TCGA PAM50
Pam50_tcga <- read.delim('data/brca_tcga/data_clinical_patient.txt')
Pam50_tcga <- Pam50_tcga[-c(1:4), ]
Pam50_tcga$Patient.ID <- gsub("\\-", "\\.", Pam50_tcga$X.Patient.Identifier)
Pam50_tcga <- Pam50_tcga[, c('Patient.ID', 'Subtype', 'Overall.Survival.Status', 'Overall.Survival..Months.', 'Disease.Free.Status', 'Disease.Free..Months.', 'Progression.Free.Status', 'Progress.Free.Survival..Months.')]
# merge with TCGA pheno table
summary(Pheno_tcga$Patient.ID %in% Pam50_tcga$Patient.ID)
# remove the old survival info
Pheno_tcga <- Pheno_tcga[, !colnames(Pheno_tcga) %in% c('Overall.Survival..Months.', 'Overall.Survival.Status', 'Disease.Free.Status', 'Disease.Free..Months.')]
# merge
Pheno_tcga <- merge(Pheno_tcga, Pam50_tcga, by = "Patient.ID")
rownames(Pheno_tcga) <- Pheno_tcga$Patient.ID
table(Pheno_tcga$Subtype)
table(Pam50_tcga$Subtype)
##########################
# remove weird cancer types
##########################
table(Pheno_metabric$Cancer.Type.Detailed)
table(Pheno_tcga$Cancer.Type.Detailed)
Pheno_tcga <- Pheno_tcga[!(Pheno_tcga$Cancer.Type.Detailed %in% c('Adenoid Cystic Breast Cancer', 'Basal Cell Carcinoma',
'Malignant Phyllodes Tumor of the Breast',
'Metaplastic Breast Cancer', 'Paget Disease of the Nipple',
'Solid Papillary Carcinoma of the Breast')),
]
#############################################################################################
#############################################################################################
## heatmap (THR70)
Expr_tcga_refAll_heatmap <- Expr_tcga_refAll[THR70_fil, ]
# Create annotation for columns/samples based on some clinical variables:
Pheno_tcga_forHeatmap <- Pheno_tcga
rownames(Pheno_tcga_forHeatmap) <- NULL
AnnAll_tcga <- Pheno_tcga_forHeatmap %>%
as.data.frame() %>%
dplyr::select(Patient.ID, ER.Status.By.IHC, PR.status.by.ihc, HER2.fish.status, IHC.HER2, Subtype) %>%
#filter(Subtype %in% c('BRCA_Basal', 'BRCA_Her2', 'BRCA_LumA', 'BRCA_LumB')) %>%
filter(ER.Status.By.IHC %in% c('Negative', 'Positive')) %>%
filter(PR.status.by.ihc %in% c('Negative', 'Positive')) %>%
dplyr:: mutate(Subtype = gsub('BRCA_', '', Subtype),
Pam50_subtypes = as.factor(Subtype),
IHC.HER2 = as.factor(IHC.HER2),
HER2.fish.status = as.factor(HER2.fish.status),
ER.Status.By.IHC = as.factor(ER.Status.By.IHC),
PR.status.by.ihc = as.factor(PR.status.by.ihc)
) %>%
dplyr::select(-Subtype) %>%
column_to_rownames(var = "Patient.ID")
table(AnnAll_tcga$Pam50_subtypes)
table(AnnAll_tcga$ER.Status.By.IHC)
table(AnnAll_tcga$PR.status.by.ihc)
# filter and transpose the expression matrix
Expr_tcga_refAll_heatmap <- Expr_tcga_refAll_heatmap[, rownames(AnnAll_tcga)]
Expr_tcga_refAll_heatmap_t <- t(Expr_tcga_refAll_heatmap)
# filter pheno (above we remove normal and NC)
Pheno_tcga <- Pheno_tcga[rownames(AnnAll_tcga), ]
# colors
ann_colors = list()
ann_colors$Pam50_subtypes <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(6)
names(ann_colors$Pam50_subtypes) <- levels(AnnAll_tcga$Pam50_subtypes)
ann_colors$ER.Status.By.IHC <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$ER.Status.By.IHC) <- levels(AnnAll_tcga$ER.Status.By.IHC)
#ann_colors$X3.Gene.classifier.subtype <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
#names(ann_colors$X3.Gene.classifier.subtype) <- levels(AnnAll_tcga$X3.Gene.classifier.subtype)
#ann_colors$Neoplasm.Histologic.Grade <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(3)
#names(ann_colors$Neoplasm.Histologic.Grade) <- levels(AnnAll_tcga$Neoplasm.Histologic.Grade)
breaksList = seq(-4, 4, by = 1)
ColPal <- colorRampPalette(colors = rev(brewer.pal(11,"RdYlBu")))(20)
ColPal2 <- rev(colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(20))
#######################################################
# get the 5 groups
heat_tcga <- pheatmap(Expr_tcga_refAll_heatmap,
scale = "none",
#color = rev(heat.colors(20)),
color =ColPal,
annotation_colors = ann_colors,
cluster_cols = T,
cluster_rows = T,
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
clustering_method = 'ward.D',
show_colnames = F,
show_rownames = T,
annotation_col = AnnAll_tcga,
annotation_names_col = T,
#annotation_row = AnnAll_tcga,
annotation_names_row = T,
fontsize = 7,
#fontsize_col = 3,
fontsize_row = 10,
silent = TRUE,
cex = 1,
cutree_cols = 5,
cutree_rows = 5,
breaks = seq(-1, 1, by = 0.1),
main = "")
clusters_tcga <- as.data.frame(cbind(t(Expr_tcga_refAll_heatmap),
'THR clusters' = cutree(heat_tcga$tree_col,
k = 5)))
table(clusters_tcga$`THR clusters`)
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
# Modify the clusters by Extracting HER2+ samples----------------
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
table(Pheno_tcga$IHC.HER2)
table(Pheno_tcga$IHC.HER2, Pheno_tcga$HER2.fish.status)
HER2_samples <- which(Pheno_tcga$IHC.HER2 == "Positive" | (Pheno_tcga$IHC.HER2 == "Equivocal" & Pheno_tcga$HER2.fish.status == "Positive"))
clusters_tcga$`THR clusters`[HER2_samples] <- max(clusters_tcga$`THR clusters`) + 1  # Add 1 to the maximum cluster number to ensure a new distinct cluster
table(clusters_tcga$`THR clusters`)
#######
# rename the levels
clusters_tcga$`THR clusters` <- as.factor(clusters_tcga$`THR clusters`)
levels(clusters_tcga$`THR clusters`) <- c('E1', 'E2', 'E3', 'E4', 'T1', 'HER2+')
table(clusters_tcga$`THR clusters`)
##############################
## add the cluster info to the phenotype table
# Reorder the rows of Pheno_metabric
Pheno_tcga <- Pheno_tcga[match(rownames(clusters_tcga), rownames(Pheno_tcga)), ]
all(rownames(clusters_tcga) == rownames(Pheno_tcga))
# Add the 'THR clusters' column
Pheno_tcga$`THR clusters` <- clusters_tcga$`THR clusters`
table(Pheno_tcga$`THR clusters`)
#################
# add the cluster info to the Ann dataframe and re-plot the heatmap
AnnAll_tcga <- AnnAll_tcga[match(rownames(clusters_tcga), rownames(AnnAll_tcga)), ]
all(rownames(clusters_tcga) == rownames(AnnAll_tcga))
AnnAll_tcga$`THR clusters` <- as.factor(clusters_tcga$`THR clusters`)
table(AnnAll_tcga$`THR clusters`)
# colors
ann_colors = list()
ann_colors$Pam50_subtypes <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(6)
names(ann_colors$Pam50_subtypes) <- levels(AnnAll_tcga$Pam50_subtypes)
ann_colors$IHC.HER2 <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(4)
names(ann_colors$IHC.HER2) <- levels(AnnAll_tcga$IHC.HER2)
ann_colors$HER2.fish.status <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(5)
names(ann_colors$HER2.fish.status) <- levels(AnnAll_tcga$HER2.fish.status)
ann_colors$ER.Status.By.IHC <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$ER.Status.By.IHC) <- levels(AnnAll_tcga$ER.Status.By.IHC)
ann_colors$PR.status.by.ihc <- colorRampPalette(colors = rev(brewer.pal(8,"RdYlBu")))(2)
names(ann_colors$PR.status.by.ihc) <- levels(AnnAll_tcga$PR.status.by.ihc)
ann_colors$`THR clusters` <- colorRampPalette(colors = rev(brewer.pal(5,"Dark2")))(6)
names(ann_colors$`THR clusters`) <- levels(AnnAll_tcga$`THR clusters`)
table(AnnAll_tcga$`THR clusters`)
breaksList = seq(-4, 4, by = 1)
ColPal <- colorRampPalette(colors = rev(brewer.pal(11,"RdYlBu")))(20)
ColPal2 <- rev(colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(20))
#####################################################
## Fix the order of samples in Expr_tcga_refAll_heatmap
Expr_tcga_refAll_heatmap <- Expr_tcga_refAll_heatmap[, match(rownames(clusters_tcga), colnames(Expr_tcga_refAll_heatmap))]
all(rownames(clusters_tcga) == colnames(Expr_tcga_refAll_heatmap))
###################################
# Create an ordering based on the `THR clusters` column in `AnnAll_metabric`
order_indices <- order(AnnAll_tcga$`THR clusters`)
# Use the order to rearrange both `Expr_metabric_refAll_heatmap` and `AnnAll_metabric`
Expr_tcga_refAll_heatmap_ordered <- Expr_tcga_refAll_heatmap[, order_indices]
AnnAll_tcga_ordered <- AnnAll_tcga[order_indices, ]
table(AnnAll_tcga_ordered$`THR clusters`)
##############
cluster_ends <- cumsum(table(AnnAll_tcga_ordered$`THR clusters`))
## Keep only the relevant information (Metastasis Event and Time)
survival_tcga <- Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.",
"Disease.Free.Status", "Disease.Free..Months.",
"Subtype", "ER.Status.By.IHC",
"PR.status.by.ihc", "HER2.fish.status", "IHC.HER2", "THR clusters")]
survival_tcga$`THR clusters` <- as.factor(survival_tcga$`THR clusters`)
table(survival_tcga$`THR clusters`)
#############
# fix the survival information
survival_tcga$Disease.Free.Status <- gsub("\\:.+", "", survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- gsub("\\:.+", "", survival_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free.Status <- as.numeric(survival_tcga$Disease.Free.Status)
survival_tcga$Overall.Survival.Status <- as.numeric(survival_tcga$Overall.Survival.Status)
table(survival_tcga$Disease.Free.Status)
table(survival_tcga$Overall.Survival.Status)
table(Pheno_tcga$Disease.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
survival_tcga$Disease.Free..Months. <- as.numeric(survival_tcga$Disease.Free..Months.)
survival_tcga$Overall.Survival..Months. <- as.numeric(survival_tcga$Overall.Survival..Months.)
# OS
Fit_tcga_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
# DFS
Fit_tcga_DFS <- survfit(Surv(Disease.Free..Months., Disease.Free.Status) ~ as.factor(`THR clusters`), data = survival_tcga)
############################################################################
############################################################################
# plot OS
cluster_colors <- as.vector(ann_colors$`THR clusters`)
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
## get T1----------
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
T1_pheno <- Pheno_tcga[Pheno_tcga$`THR clusters` == 'T1', ]
T1_expr <- Expr_tcga_refAll[, rownames(T1_pheno)]
all(rownames(T1_pheno) == colnames(T1_expr))
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
## Load the i20 signature ---------
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
i20 <- read_xlsx("./figures/c3_DE_THR50_RFS/THR50_c3_longVSshortSurv_DE.xlsx")$gene
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
## Load the i45 signature ---------
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
load('objs/THR56T1sep_i_genesets.rda')
#&&&&&&&&&&&&&&&&&&
### calculate signature score---------
#&&&&&&&&&&&&&&&&&&
i20_filt <- intersect(i20, rownames(Expr_tcga_refAll))
T1_i20_expr <- T1_expr[i20_filt, ]
i45_filt <- intersect(i30p15, rownames(Expr_tcga_refAll))
T1_i45_expr <- T1_expr[i45_filt, ]
# using GSVA
gene_sets <- list(i20 = rownames(T1_i20_expr), i45 = rownames(T1_i45_expr))
T1_signature_scores <- gsva(T1_expr, gene_sets, method = "ssgsea")
T1_signature_scores_i20 <- as.vector(T1_signature_scores[1, ])
T1_signature_scores_i45 <- as.vector(T1_signature_scores[2, ])
T1_pheno$i20_score <- T1_signature_scores_i20
T1_pheno$i45_score <- T1_signature_scores_i45
# using logistic regression:
Data_T1 <- data.frame(cbind(t(T1_expr), 'RFS' = T1_pheno$Disease.Free.Status))
Data_T1$RFS <- as.factor(Data_T1$RFS)
Data_T1$RFS
#$$$$$$$$$$$$
## using logistic regression------
#$$$$$$$$$$$$$
# load the logistic regression model
load('./objs/metabric_THR70_derived_T1_THR50_i20_logReg_model_Her2_DrawnOut.rda')
i20_logReg_model
#levels(Data_T1$RFS) <- c('longSurv', 'shortSurv')
T1_pheno$i20_logReg_score <- i20_logReg_model %>% predict(Data_T1 , type = "response")
#levels(Data_T1$RFS) <- c('longSurv', 'shortSurv')
# predict using the logistic reg model
Data_T1$AK057319 <- 0
T1_pheno$i20_logReg_score <- i20_logReg_model %>% predict(Data_T1 , type = "response")
Data_T1$F09070 <- 0
T1_pheno$i20_logReg_score <- i20_logReg_model %>% predict(Data_T1 , type = "response")
i20_logReg_model
Data_T1 <- data.frame(cbind(t(T1_expr), 'RFS' = T1_pheno$Disease.Free.Status))
Data_T1$RFS <- as.factor(Data_T1$RFS)
View(i20_logReg_model)
i20_logReg_model$coefficients
# modify the logreg model to remove both AK057319 and F09070
i20_logReg_model$coefficients <- i20_logReg_model$coefficients[-c('AK057319', 'F09070')]
# modify the logreg model to remove both AK057319 and F09070
i20_logReg_model$coefficients <- i20_logReg_model$coefficients[~c('AK057319', 'F09070')]
# modify the logreg model to remove both AK057319 and F09070
i20_logReg_model$coefficients <- i20_logReg_model$coefficients[!c('AK057319', 'F09070')]
# modify the logreg model to remove both AK057319 and F09070
i20_logReg_model$coefficients <- i20_logReg_model$coefficients[!(i20_logReg_model$coefficients %in% c('AK057319', 'F09070'))]
i20_logReg_model$coefficients
