#Expr_metabric <- Expr_metabric[ClassifierGenes, ]
#Expr_tcga <- Expr_tcga[ClassifierGenes, ]
# create a merged pdata and Z-scores object
CoxData_metabric <- data.frame(Phenotype_metabric)
CoxData_tcga <- data.frame(Phenotype_tcga)
#CutPoint <- surv_cutpoint(data = CoxData, time = "Time", event = "Event", variables = "ResidualDisease_Score")
#CutPoint
#SurvData <- surv_categorize(CutPoint)
#SurvData$ResidualDisease_Score <- factor(SurvData$ResidualDisease_Score, levels = c("low", "high"))
########################################################################
## Fit survival curves
# Metabric:
# init a list for classifier pairs
pairs_list <- list()
for(i in seq(1,nrow(ktsp_metabric$TSPs))){
pairs_list[i] <- paste0(ktsp_metabric$TSPs[i,1], '.', ktsp_metabric$TSPs[i,2])
}
names(pairs_list) <- pairs_list
# fit surv curves
#fit_list <- list()
surv_func_metabric_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_metabric))
}
fit_list_metabric_os <- lapply(pairs_list, surv_func_metabric_os)
# calculate the pvalue
Pval_list_metabric_os <- surv_pvalue(fit_list_metabric_os)
Pval_df_metabric_os <- do.call(rbind.data.frame, Pval_list_metabric_os)
## metabric all pairs
Fit_sig_metabric <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_metabric, data = CoxData_metabric)
ggsurvplot(Fit_sig_metabric,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and METABRIC OS')
surv_func_TCGA_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_tcga))
}
fit_list_tcga_os <- lapply(pairs_list, surv_func_TCGA_os)
# calculate the pvalue
Pval_list_tcga_os <- surv_pvalue(fit_list_tcga_os)
Pval_df_tcga_os <- do.call(rbind.data.frame, Pval_list_tcga_os)
## TCGA all pairs
Fit_sig_TCGA_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_tcga, data = CoxData_tcga)
ggsurvplot(Fit_sig_TCGA_os,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and TCGA OS')
range(Expr_metabric)
range(Expr_tcga)
### Train a classifier using default filtering function based on Wilcoxon
set.seed(333)
ktsp_metabric <- SWAP.Train.KTSP(
Expr_metabric, group_metabric, krange=8, disjoint = T,
FilterFunc = SWAP.Filter.Wilcoxon, featureNo=300, RestrictedPairs = myTSPs)
ktsp_metabric
############################################################################
### Compute the sum and find the best threshold: All training samples
############################################################################
### Compute the sum and find the best threshold: All training samples
ktspStats_metabric <- SWAP.KTSP.Statistics(inputMat = Expr_metabric, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_metabric$statistics)
### Threshold
thr <- coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "best")["threshold"]
thr
### Print ROC curve local maximas
coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "local maximas")
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
ROC_metabric <- roc(group_metabric, ktspStats_metabric$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_metabric
### Get predictions based on best threshold from ROC curve
prediction_metabric <- SWAP.KTSP.Classify(Expr_metabric, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the TRAINING set
confusionMatrix(prediction_metabric, group_metabric, positive = '1', mode = "everything")
MCC_metabric <- mltools::mcc(pred = prediction_metabric, actuals = group_metabric)
MCC_metabric
########################################################################
#########################################################################
### Testing
## Compute the sum and find the best threshold
ktspStats_tcga <- SWAP.KTSP.Statistics(inputMat = Expr_tcga, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_tcga$statistics)
## Plot curve
ROC_tcga <- roc(group_tcga, ktspStats_tcga$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
ROC_tcga
### Get predictions based on best threshold from ROC curve
prediction_tcga <- SWAP.KTSP.Classify(Expr_tcga, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the Test set
confusion_tcga <- confusionMatrix(prediction_tcga, group_tcga, positive = "1", mode = "everything")
confusion_tcga
MCC_tcga <- mltools::mcc(pred = prediction_tcga, actuals = group_tcga)
MCC_tcga
############################################################
############################################################
############################################################
# test the ktsp pairs with survival
ClassifierGenes <- as.vector(ktsp_metabric$TSPs)
##########################
## Keep only the relevant information (Metastasis Event and Time)
Phenotype_metabric <- cbind(Pheno_metabric[, c("Overall.Survival.Status", "Overall.Survival..Months.")],
ktspStats_metabric$comparisons, prediction_metabric)
Phenotype_tcga <- cbind(Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Progression.Free.Status", "Progress.Free.Survival..Months.")],
ktspStats_tcga$comparisons, prediction_tcga)
#Expr_metabric <- Expr_metabric[ClassifierGenes, ]
#Expr_tcga <- Expr_tcga[ClassifierGenes, ]
# create a merged pdata and Z-scores object
CoxData_metabric <- data.frame(Phenotype_metabric)
CoxData_tcga <- data.frame(Phenotype_tcga)
#CutPoint <- surv_cutpoint(data = CoxData, time = "Time", event = "Event", variables = "ResidualDisease_Score")
#CutPoint
#SurvData <- surv_categorize(CutPoint)
#SurvData$ResidualDisease_Score <- factor(SurvData$ResidualDisease_Score, levels = c("low", "high"))
########################################################################
## Fit survival curves
# Metabric:
# init a list for classifier pairs
pairs_list <- list()
for(i in seq(1,nrow(ktsp_metabric$TSPs))){
pairs_list[i] <- paste0(ktsp_metabric$TSPs[i,1], '.', ktsp_metabric$TSPs[i,2])
}
names(pairs_list) <- pairs_list
# fit surv curves
#fit_list <- list()
surv_func_metabric_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_metabric))
}
fit_list_metabric_os <- lapply(pairs_list, surv_func_metabric_os)
# calculate the pvalue
Pval_list_metabric_os <- surv_pvalue(fit_list_metabric_os)
Pval_df_metabric_os <- do.call(rbind.data.frame, Pval_list_metabric_os)
## metabric all pairs
Fit_sig_metabric <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_metabric, data = CoxData_metabric)
ggsurvplot(Fit_sig_metabric,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and METABRIC OS')
surv_func_TCGA_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_tcga))
}
fit_list_tcga_os <- lapply(pairs_list, surv_func_TCGA_os)
# calculate the pvalue
Pval_list_tcga_os <- surv_pvalue(fit_list_tcga_os)
Pval_df_tcga_os <- do.call(rbind.data.frame, Pval_list_tcga_os)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_tcga_os <- ggsurvplot_list(fit_list_tcga_os, CoxData_tcga, legend.title = names(fit_list_tcga_os), pval = TRUE)
## TCGA all pairs
Fit_sig_TCGA_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_tcga, data = CoxData_tcga)
ggsurvplot(Fit_sig_TCGA_os,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and TCGA OS')
ktsp_metabric
############################################################################
### Compute the sum and find the best threshold: All training samples
ktspStats_metabric <- SWAP.KTSP.Statistics(inputMat = Expr_metabric, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_metabric$statistics)
### Threshold
thr <- coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "best")["threshold"]
thr
### Print ROC curve local maximas
coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "local maximas")
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
ROC_metabric <- roc(group_metabric, ktspStats_metabric$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_metabric
### Get predictions based on best threshold from ROC curve
prediction_metabric <- SWAP.KTSP.Classify(Expr_metabric, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the TRAINING set
confusionMatrix(prediction_metabric, group_metabric, positive = '1', mode = "everything")
MCC_metabric <- mltools::mcc(pred = prediction_metabric, actuals = group_metabric)
MCC_metabric
########################################################################
#########################################################################
### Testing
## Compute the sum and find the best threshold
ktspStats_tcga <- SWAP.KTSP.Statistics(inputMat = Expr_tcga, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_tcga$statistics)
## Plot curve
ROC_tcga <- roc(group_tcga, ktspStats_tcga$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
ROC_tcga
### Get predictions based on best threshold from ROC curve
prediction_tcga <- SWAP.KTSP.Classify(Expr_tcga, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the Test set
confusion_tcga <- confusionMatrix(prediction_tcga, group_tcga, positive = "1", mode = "everything")
confusion_tcga
MCC_tcga <- mltools::mcc(pred = prediction_tcga, actuals = group_tcga)
MCC_tcga
############################################################
############################################################
############################################################
# test the ktsp pairs with survival
ClassifierGenes <- as.vector(ktsp_metabric$TSPs)
##########################
## Keep only the relevant information (Metastasis Event and Time)
Phenotype_metabric <- cbind(Pheno_metabric[, c("Overall.Survival.Status", "Overall.Survival..Months.")],
ktspStats_metabric$comparisons, prediction_metabric)
Phenotype_tcga <- cbind(Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Progression.Free.Status", "Progress.Free.Survival..Months.")],
ktspStats_tcga$comparisons, prediction_tcga)
#Expr_metabric <- Expr_metabric[ClassifierGenes, ]
#Expr_tcga <- Expr_tcga[ClassifierGenes, ]
# create a merged pdata and Z-scores object
CoxData_metabric <- data.frame(Phenotype_metabric)
CoxData_tcga <- data.frame(Phenotype_tcga)
# Metabric:
# init a list for classifier pairs
pairs_list <- list()
for(i in seq(1,nrow(ktsp_metabric$TSPs))){
pairs_list[i] <- paste0(ktsp_metabric$TSPs[i,1], '.', ktsp_metabric$TSPs[i,2])
}
names(pairs_list) <- pairs_list
# fit surv curves
#fit_list <- list()
surv_func_metabric_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_metabric))
}
fit_list_metabric_os <- lapply(pairs_list, surv_func_metabric_os)
# calculate the pvalue
Pval_list_metabric_os <- surv_pvalue(fit_list_metabric_os)
Pval_df_metabric_os <- do.call(rbind.data.frame, Pval_list_metabric_os)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_metabric_os <- ggsurvplot_list(fit_list_metabric_os, CoxData_metabric, legend.title = names(fit_list_metabric_os), pval = TRUE)
## metabric all pairs
Fit_sig_metabric <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_metabric, data = CoxData_metabric)
ggsurvplot(Fit_sig_metabric,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and METABRIC OS')
### Train a classifier using default filtering function based on Wilcoxon
set.seed(333)
ktsp_metabric <- SWAP.Train.KTSP(
Expr_metabric, group_metabric, krange=8, disjoint = T,
FilterFunc = SWAP.Filter.Wilcoxon, featureNo=100, RestrictedPairs = myTSPs)
ktsp_metabric
############################################################################
### Compute the sum and find the best threshold: All training samples
ktspStats_metabric <- SWAP.KTSP.Statistics(inputMat = Expr_metabric, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_metabric$statistics)
### Threshold
thr <- coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "best")["threshold"]
thr
### Print ROC curve local maximas
coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "local maximas")
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
ROC_metabric <- roc(group_metabric, ktspStats_metabric$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_metabric
### Get predictions based on best threshold from ROC curve
prediction_metabric <- SWAP.KTSP.Classify(Expr_metabric, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the TRAINING set
confusionMatrix(prediction_metabric, group_metabric, positive = '1', mode = "everything")
MCC_metabric <- mltools::mcc(pred = prediction_metabric, actuals = group_metabric)
MCC_metabric
## Compute the sum and find the best threshold
ktspStats_tcga <- SWAP.KTSP.Statistics(inputMat = Expr_tcga, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_tcga$statistics)
## Plot curve
ROC_tcga <- roc(group_tcga, ktspStats_tcga$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
ROC_tcga
### Get predictions based on best threshold from ROC curve
prediction_tcga <- SWAP.KTSP.Classify(Expr_tcga, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the Test set
confusion_tcga <- confusionMatrix(prediction_tcga, group_tcga, positive = "1", mode = "everything")
confusion_tcga
MCC_tcga <- mltools::mcc(pred = prediction_tcga, actuals = group_tcga)
MCC_tcga
############################################################
############################################################
############################################################
# test the ktsp pairs with survival
ClassifierGenes <- as.vector(ktsp_metabric$TSPs)
##########################
## Keep only the relevant information (Metastasis Event and Time)
Phenotype_metabric <- cbind(Pheno_metabric[, c("Overall.Survival.Status", "Overall.Survival..Months.")],
ktspStats_metabric$comparisons, prediction_metabric)
Phenotype_tcga <- cbind(Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Progression.Free.Status", "Progress.Free.Survival..Months.")],
ktspStats_tcga$comparisons, prediction_tcga)
#Expr_metabric <- Expr_metabric[ClassifierGenes, ]
#Expr_tcga <- Expr_tcga[ClassifierGenes, ]
# create a merged pdata and Z-scores object
CoxData_metabric <- data.frame(Phenotype_metabric)
CoxData_tcga <- data.frame(Phenotype_tcga)
#CutPoint <- surv_cutpoint(data = CoxData, time = "Time", event = "Event", variables = "ResidualDisease_Score")
#CutPoint
#SurvData <- surv_categorize(CutPoint)
#SurvData$ResidualDisease_Score <- factor(SurvData$ResidualDisease_Score, levels = c("low", "high"))
########################################################################
## Fit survival curves
# Metabric:
# init a list for classifier pairs
pairs_list <- list()
for(i in seq(1,nrow(ktsp_metabric$TSPs))){
pairs_list[i] <- paste0(ktsp_metabric$TSPs[i,1], '.', ktsp_metabric$TSPs[i,2])
}
names(pairs_list) <- pairs_list
# fit surv curves
#fit_list <- list()
surv_func_metabric_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_metabric))
}
fit_list_metabric_os <- lapply(pairs_list, surv_func_metabric_os)
# calculate the pvalue
Pval_list_metabric_os <- surv_pvalue(fit_list_metabric_os)
Pval_df_metabric_os <- do.call(rbind.data.frame, Pval_list_metabric_os)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_metabric_os <- ggsurvplot_list(fit_list_metabric_os, CoxData_metabric, legend.title = names(fit_list_metabric_os), pval = TRUE)
## metabric all pairs
Fit_sig_metabric <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_metabric, data = CoxData_metabric)
ggsurvplot(Fit_sig_metabric,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and METABRIC OS')
ktsp_metabric <- SWAP.Train.KTSP(
Expr_metabric, group_metabric, krange=10, disjoint = T,
FilterFunc = SWAP.Filter.Wilcoxon, featureNo=100, RestrictedPairs = myTSPs)
ktsp_metabric
############################################################################
### Compute the sum and find the best threshold: All training samples
ktspStats_metabric <- SWAP.KTSP.Statistics(inputMat = Expr_metabric, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_metabric$statistics)
### Threshold
thr <- coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "best")["threshold"]
thr
### Print ROC curve local maximas
coords(roc(group_metabric, ktspStats_metabric$statistics, levels = c(0, 1), direction = "<" ), "local maximas")
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
ROC_metabric <- roc(group_metabric, ktspStats_metabric$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE)
ROC_metabric
### Get predictions based on best threshold from ROC curve
prediction_metabric <- SWAP.KTSP.Classify(Expr_metabric, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the TRAINING set
confusionMatrix(prediction_metabric, group_metabric, positive = '1', mode = "everything")
MCC_metabric <- mltools::mcc(pred = prediction_metabric, actuals = group_metabric)
MCC_metabric
########################################################################
#########################################################################
### Testing
## Compute the sum and find the best threshold
ktspStats_tcga <- SWAP.KTSP.Statistics(inputMat = Expr_tcga, classifier = ktsp_metabric, CombineFunc = sum)
summary(ktspStats_tcga$statistics)
## Plot curve
ROC_tcga <- roc(group_tcga, ktspStats_tcga$statistics, plot = F, print.auc=TRUE, ci = T, print.auc.col="black", levels = c(0, 1), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
ROC_tcga
### Get predictions based on best threshold from ROC curve
prediction_tcga <- SWAP.KTSP.Classify(Expr_tcga, ktsp_metabric, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the Test set
confusion_tcga <- confusionMatrix(prediction_tcga, group_tcga, positive = "1", mode = "everything")
confusion_tcga
MCC_tcga <- mltools::mcc(pred = prediction_tcga, actuals = group_tcga)
MCC_tcga
############################################################
############################################################
############################################################
# test the ktsp pairs with survival
ClassifierGenes <- as.vector(ktsp_metabric$TSPs)
##########################
## Keep only the relevant information (Metastasis Event and Time)
Phenotype_metabric <- cbind(Pheno_metabric[, c("Overall.Survival.Status", "Overall.Survival..Months.")],
ktspStats_metabric$comparisons, prediction_metabric)
Phenotype_tcga <- cbind(Pheno_tcga[, c("Overall.Survival.Status", "Overall.Survival..Months.", "Progression.Free.Status", "Progress.Free.Survival..Months.")],
ktspStats_tcga$comparisons, prediction_tcga)
#Expr_metabric <- Expr_metabric[ClassifierGenes, ]
#Expr_tcga <- Expr_tcga[ClassifierGenes, ]
# create a merged pdata and Z-scores object
CoxData_metabric <- data.frame(Phenotype_metabric)
CoxData_tcga <- data.frame(Phenotype_tcga)
#CutPoint <- surv_cutpoint(data = CoxData, time = "Time", event = "Event", variables = "ResidualDisease_Score")
#CutPoint
#SurvData <- surv_categorize(CutPoint)
#SurvData$ResidualDisease_Score <- factor(SurvData$ResidualDisease_Score, levels = c("low", "high"))
########################################################################
## Fit survival curves
# Metabric:
# init a list for classifier pairs
pairs_list <- list()
for(i in seq(1,nrow(ktsp_metabric$TSPs))){
pairs_list[i] <- paste0(ktsp_metabric$TSPs[i,1], '.', ktsp_metabric$TSPs[i,2])
}
names(pairs_list) <- pairs_list
# fit surv curves
#fit_list <- list()
surv_func_metabric_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_metabric))
}
fit_list_metabric_os <- lapply(pairs_list, surv_func_metabric_os)
# calculate the pvalue
Pval_list_metabric_os <- surv_pvalue(fit_list_metabric_os)
Pval_df_metabric_os <- do.call(rbind.data.frame, Pval_list_metabric_os)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_metabric_os <- ggsurvplot_list(fit_list_metabric_os, CoxData_metabric, legend.title = names(fit_list_metabric_os), pval = TRUE)
## metabric all pairs
Fit_sig_metabric <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_metabric, data = CoxData_metabric)
ggsurvplot(Fit_sig_metabric,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and METABRIC OS')
surv_func_TCGA_os <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = CoxData_tcga))
}
fit_list_tcga_os <- lapply(pairs_list, surv_func_TCGA_os)
# calculate the pvalue
Pval_list_tcga_os <- surv_pvalue(fit_list_tcga_os)
Pval_df_tcga_os <- do.call(rbind.data.frame, Pval_list_tcga_os)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_tcga_os <- ggsurvplot_list(fit_list_tcga_os, CoxData_tcga, legend.title = names(fit_list_tcga_os), pval = TRUE)
## TCGA all pairs
Fit_sig_TCGA_os <- survfit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ prediction_tcga, data = CoxData_tcga)
ggsurvplot(Fit_sig_TCGA_os,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and TCGA OS')
surv_func_TCGA_pfs <- function(x){
f <- as.formula(paste("Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~", x))
return(surv_fit(f, data = CoxData_tcga))
}
fit_list_tcga_pfs <- lapply(pairs_list, surv_func_TCGA_pfs)
# calculate the pvalue
Pval_list_tcga_pfs <- surv_pvalue(fit_list_tcga_pfs)
Pval_df_tcga_pfs <- do.call(rbind.data.frame, Pval_list_tcga_pfs)
#Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
############
## Plot survival curves
plot_list_tcga_pfs <- ggsurvplot_list(fit_list_tcga_pfs, CoxData_tcga, legend.title = names(fit_list_tcga_pfs), pval = TRUE)
## TCGA all pairs
Fit_sig_TCGA_pfs <- survfit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ prediction_tcga, data = CoxData_tcga)
ggsurvplot(Fit_sig_TCGA_pfs,
risk.table = FALSE,
pval = TRUE,
ggtheme = theme_minimal(),
risk.table.y.text.col = FALSE,
risk.table.y.text = FALSE, title = 'k-TSPs and TCGA PFS')
DEGs = read.delim("DEGs_genes_ordered.txt",sep='\t',row.names = 1)
DEGs
rm(list = ls())
setwd('/Volumes/Mohamed/PKC')
require(escape)
library(dittoSeq)
library(GSVA)
library(GSVAdata)
library(limma)
library(GEOquery)
library(Seurat)
library(dplyr)
library(patchwork)
library(SeuratData)
library(cowplot)
library(msigdbr)
require(clusterProfiler)
library(org.Mm.eg.db)
renv::init()
require(escape)
library(dittoSeq)
library(GSVA)
library(GSVAdata)
library(limma)
library(GEOquery)
library(Seurat)
library(dplyr)
library(patchwork)
library(SeuratData)
library(cowplot)
library(msigdbr)
require(clusterProfiler)
library(org.Mm.eg.db)
renv::activate()
require(escape)
library(dittoSeq)
library(GSVA)
library(GSVAdata)
library(limma)
library(GEOquery)
library(Seurat)
library(dplyr)
library(patchwork)
library(SeuratData)
library(cowplot)
library(msigdbr)
require(clusterProfiler)
library(org.Mm.eg.db)
